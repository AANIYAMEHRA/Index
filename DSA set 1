/* 1)Given an integer array nums, find the subarray with the largest sum, and return its sum.
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.*/
#include <stdio.h>

int maxSubArray(int* nums, int numsSize) {
    int max_current = nums[0];
    int max_global = nums[0];

    for (int i = 1; i < numsSize; i++) {
        max_current = (nums[i] > max_current + nums[i]) ? nums[i] : max_current + nums[i];
        if (max_current > max_global) {
            max_global = max_current;
        }
    }

    return max_global;
}

int main() {
    int nums[] = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    int size = sizeof(nums) / sizeof(nums[0]);
    int result = maxSubArray(nums, size);
    printf("Maximum subarray sum: %d\n", result);  // Output: 6
    return 0;
}
/*2) Given an integer array arr[] of size n, the task is to find the count inversions of the given array.
 Two array elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.
 Input: arr[] = {7, 2, 6, 3}
 Output: 4
 Explanation: Given array has 4 inversions: (7, 2), (7, 6), (7, 3), (6, 3)*/
 #include <stdio.h>

int merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int count = 0;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    i = 0;
    j = 0;
    k = left;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
            count += (n1 - i);  // Count inversions
        }
    }

    while (i < n1)
        arr[k++] = L[i++];

    while (j < n2)
        arr[k++] = R[j++];

    return count;
}

int mergeSortAndCount(int arr[], int left, int right) {
    int count = 0;
    if (left < right) {
        int mid = left + (right - left) / 2;

        count += mergeSortAndCount(arr, left, mid);
        count += mergeSortAndCount(arr, mid + 1, right);
        count += merge(arr, left, mid, right);
    }
    return count;
}

int countInversions(int arr[], int n) {
    return mergeSortAndCount(arr, 0, n - 1);
}

int main() {
    int arr[] = {7, 2, 6, 3};
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = countInversions(arr, n);
    printf("Number of inversions: %d\n", result);  // Output: 4
    return 0;
}
/*  3)Given an integer array nums and an integer k, return the kth largest element in the array.
 Note that it is the kth largest element in the sorted order, not the kth distinct element.
 Solve it without sorting.
 Example:
 Input: nums = [3,2,1,5,6,4], k = 2
 Output: 5*/
 #include <stdio.h>
#include <stdlib.h>

typedef struct {
    int* data;
    int size;
    int capacity;
} MinHeap;

MinHeap* createMinHeap(int capacity) {
    MinHeap* heap = (MinHeap*)malloc(sizeof(MinHeap));
    heap->data = (int*)malloc(capacity * sizeof(int));
    heap->size = 0;
    heap->capacity = capacity;
    return heap;
}

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void heapifyUp(MinHeap* heap, int index) {
    while (index > 0 && heap->data[(index - 1) / 2] > heap->data[index]) {
        swap(&heap->data[(index - 1) / 2], &heap->data[index]);
        index = (index - 1) / 2;
    }
}

void heapifyDown(MinHeap* heap, int index) {
    int smallest = index;
    int left = 2 * index + 1;
    int right = 2 * index + 2;

    if (left < heap->size && heap->data[left] < heap->data[smallest])
        smallest = left;
    if (right < heap->size && heap->data[right] < heap->data[smallest])
        smallest = right;
    if (smallest != index) {
        swap(&heap->data[index], &heap->data[smallest]);
        heapifyDown(heap, smallest);
    }
}

void insertMinHeap(MinHeap* heap, int value) {
    if (heap->size < heap->capacity) {
        heap->data[heap->size++] = value;
        heapifyUp(heap, heap->size - 1);
    } else if (value > heap->data[0]) {
        heap->data[0] = value;
        heapifyDown(heap, 0);
    }
}

int findKthLargest(int* nums, int numsSize, int k) {
    MinHeap* heap = createMinHeap(k);
    for (int i = 0; i < numsSize; i++) {
        insertMinHeap(heap, nums[i]);
    }
    int result = heap->data[0]; // The root of the min-heap is the kth largest
    free(heap->data);
    free(heap);
    return result;
}

int main() {
    int nums[] = {3, 2, 1, 5, 6, 4};
    int k = 2;
    int result = findKthLargest(nums, sizeof(nums) / sizeof(nums[0]), k);
    printf("The %dth largest element is: %d\n", k, result);  // Output: 5
    return 0;
}
/* 4)A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and
 removing all non-alphanumeric characters, it reads the same forward and backward.
 Alphanumeric characters include letters and numbers.*/
#include <stdio.h>
#include <ctype.h>
#include <string.h>

int isPalindrome(char* s) {
    char filtered[1000]; // Buffer for the normalized string
    int j = 0;

    // Normalize the input string
    for (int i = 0; s[i] != '\0'; i++) {
        if (isalnum(s[i])) {
            filtered[j++] = tolower(s[i]); // Convert to lowercase and store
        }
    }
    filtered[j] = '\0'; // Null-terminate the filtered string

    // Check if the filtered string is a palindrome
    int left = 0, right = j - 1;
    while (left < right) {
        if (filtered[left] != filtered[right]) {
            return 0; // Not a palindrome
        }
        left++;
        right--;
    }
    return 1; // Is a palindrome
}

int main() {
    char phrase[] = "A man, a plan, a canal: Panama";
    if (isPalindrome(phrase)) {
        printf("The phrase is a palindrome.\n");
    } else {
        printf("The phrase is not a palindrome.\n");
    }
    return 0;
} 
